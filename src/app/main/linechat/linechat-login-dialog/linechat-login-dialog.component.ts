import { Component, OnDestroy, OnInit, AfterViewInit, ChangeDetectorRef } from '@angular/core';
import { LINECHAT_STATE, LinechatService } from '../services/linechat.service';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DomSanitizer } from '@angular/platform-browser';


@Component({
	selector: 'app-linechat-login-dialog',
	templateUrl: './linechat-login-dialog.component.html',
	styleUrls: ['./linechat-login-dialog.component.scss']
})
export class LinechatLoginDialogComponent implements OnInit, OnDestroy {

	private _unsubscribeAll: Subject<any>;
	qrcodeImg: any = null;
	pincode: string = '';
	state: string = '';

	loginTimer = 120000;

	intervalId;

	constructor(
		private lineService: LinechatService,
		public dialogRef: MatDialogRef<LinechatLoginDialogComponent>,
		private sanitizer:DomSanitizer,
		private _ref: ChangeDetectorRef,
	) {
		this._unsubscribeAll = new Subject<any>();
		// this.qrcodeImg = 'data:image/png;base64, ';
		// this.pincode = '1234';
	}

	ngOnInit() {
		// this.state='pincodeWait';
		// this.startTimer();

		this.lineService.login();

		this.lineService.getSseLogin()
			.pipe(takeUntil(this._unsubscribeAll))
			.subscribe(e => {
				this.state = e;
				console.log(e);
				if (e === LINECHAT_STATE.QRCODE_WAIT) {
					this.qrcodeImg = this.lineService.qrcodeImg;
					// console.log(this.qrcodeImg);
				} 
			
				if (e === LINECHAT_STATE.PINCODE_WAIT) {
					this.startTimer();
					this.pincode = this.lineService.pincode;
					// console.log(this.pincode);
				}

				if (e === LINECHAT_STATE.SUCCESS) {
					console.log("login success:dialog close");
					clearInterval(this.intervalId);
					this.dialogRef.close();
				}
			})
		
	}

	ngOnDestroy() {
		clearInterval(this.intervalId);
		this._unsubscribeAll.next();
		this._unsubscribeAll.complete();
	}

	// onCancel() {
	// 	this.dialogRef.close()
	// }

	getQrcodeImage() {
		return this.sanitizer.bypassSecurityTrustUrl(this.qrcodeImg);
	}

	isQrcodeWait() {
		return this.state === LINECHAT_STATE.QRCODE_WAIT;
	}

	isPincodeWait() {
		return this.state === LINECHAT_STATE.PINCODE_WAIT;
	}

	startTimer() {
		this.intervalId = setInterval(() => {
			this.loginTimer -= 1000;
		}, 1000);
	}

}
